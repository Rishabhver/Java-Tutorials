package ExceptionHandlingLearn;

import java.io.File;
import java.io.FileReader;

public class ExceptionalHandlingBasic {

	public static void main(String[] args)  {
/*		
		// What is exception : An exception (or exceptional event) is a problem that arises during the execution of a program. 
		// When an Exception occurs the normal flow of the program is disrupted and the program/Application terminates abnormally,
		
		// Types of exception : Checked and unchecked
		
		// 1. Checked : A checked exception is an exception that is checked (notified) by the compiler at compilation-time, these are also called as compile time exceptions. 
		//These exceptions cannot simply be ignored, the programmer should take care of (handle) these exceptions. 
		// e.g FileNotFoundException
		//  File file = new File("E://file.txt");
	     // FileReader fr = new FileReader(file); 
	     // eg: 2 InterruptedException
	      // Thread.sleep(2000);
		
	      
	      // 2. Unchecked: An unchecked exception is an exception that occurs at the time of execution. These are also called as Runtime Exceptions. 
		  // These include programming bugs, such as logic errors or improper use of an API. Runtime exceptions are ignored at the time of compilation.
		  // eg.1 ArrayIndexOutofBondException
		//   Example 1  int num[] = {1, 2, 3, 4};
	    //              System.out.println(num[5]);
		// Example 2: ArithmeticException     
		 //               int i = 9/0; 
		 //              System.out.println(i);
		
		
		//  Exception Hierarchy                                        Throwable  
		//		                                         Error                             Exception
		//                                                                RunTimeException             Other Exception
		// Throwable has 2 child (Error and Exception)
		// Exception has 2 child (Runtime Exception and other exception)
		//
		
		// What is error: The error indicates a problem that mainly occurs due to the lack of system resources and our application should not catch these types of problems.   .
		// Errors are generated to indicate errors generated by the runtime environment. 
		// Example: JVM is out of memory. Normally, programs cannot recover from errors.
		
		// Important methods in exception class
		
		//  1. public void printStackTrace() - Prints the result along with stack trace system.err
		//  2. public Stric getMessage() - Prints details message of the error occured
		
		// Try/Catch block : A method catches an exception using a combination of the try and catch keywords. 
		// A try/catch block is placed around the code that might generate an exception. Code within a try/catch block is referred to as protected code,
		// Syntax: try {
                      //    int a[] = new int[2];
                      //     System.out.println("Access element three :" + a[3]);
                       //    catch (ArrayIndexOutOfBoundsException e)
                       //    {
                        //      System.out.println("Exception thrown  :" + e);
                        //    }
                         //                 System.out.println("Out of the block");
	// }
	
		
		//  Catching Multiple type of exception 
		//   catch (IOException|FileNotFoundException ex) {
		//	   logger.log(ex);
		//	   throw ex;
		
		
		// Throws and Throw Difference ->
		// Throws : If a method does not handle a checked exception,
		// the method must declare it using the throws keyword. The throws keyword appears at the end of a method's signature. throws is used to
		// postpone the handling of a checked exception 
		
		// Throw: You can throw an exception, either a newly instantiated one or an exception that you just caught, by using the throw keyword. throw is used to invoke
		// an exception explicitly.
		
		// Example:                     public void deposit(double amount) throws RemoteException {
	                                                 // Method implementation
	    //                                      throw new RemoteException(); -> will throw Remote Exception
		//                               }
		
		
		// Common exceptions
		// In Java, it is possible to define two catergories of Exceptions and Errors.

//1. JVM Exceptions − These are exceptions/errors that are exclusively or logically thrown by the JVM.
//Examples: NullPointerException, ArrayIndexOutOfBoundsException, ClassCastException.

// 2. Programmatic Exceptions − These exceptions are thrown explicitly by the application or the API programmers. 
//		Examples: IllegalArgumentException, IllegalStateException.
		
		
		
		
		
	   }
		*/
		
	}
}
	    


